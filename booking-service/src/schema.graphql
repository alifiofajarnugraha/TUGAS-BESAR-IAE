scalar Date

# ✅ Enhanced types dengan tour information
type Booking {
  id: ID!
  userId: ID!
  tourId: ID!
  status: BookingStatus!
  departureDate: String!
  participants: Int!
  totalCost: Float!
  bookingDate: String!
  notes: String
  paymentStatus: PaymentStatus!
  createdAt: String!
  updatedAt: String!
  # ✅ ADD: Tour info untuk display purposes
  tourInfo: TourInfo
}

# ✅ ADD: Tour information type
type TourInfo {
  id: ID
  name: String
  location: String
  duration: String
  currency: String
  priceAmount: Float
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

# ✅ Enhanced BookingCalculation dengan tour info
type BookingCalculation {
  basePrice: Float!
  participants: Int!
  subtotal: Float!
  tax: Float!
  discount: Float!
  totalCost: Float!
  breakdown: [CostBreakdown!]!
  # ✅ ADD: Tour context untuk calculation
  tourInfo: TourInfo
}

type CostBreakdown {
  item: String!
  amount: Float!
  quantity: Int
}

# ✅ Enhanced AvailabilityResult dengan tour info
type AvailabilityResult {
  available: Boolean!
  message: String!
  slotsLeft: Int
  hotelAvailable: Boolean
  transportAvailable: Boolean
  # ✅ ADD: Tour context untuk availability
  tourInfo: TourInfo
}

input BookingInput {
  userId: ID!
  tourId: ID!
  departureDate: String!
  participants: Int!
  notes: String
}

input BookingUpdateInput {
  status: BookingStatus
  notes: String
  paymentStatus: PaymentStatus
}

type Query {
  getBooking(id: ID!): Booking
  getUserBookings(userId: ID!): [Booking!]!
  getAllBookings: [Booking!]!
  getBookingsByStatus(status: BookingStatus!): [Booking!]!
  getBookingsByDateRange(startDate: String!, endDate: String!): [Booking!]!

  # ✅ Enhanced dengan real tour data integration
  calculateBookingCost(
    tourId: ID!
    participants: Int!
    departureDate: String!
  ): BookingCalculation!

  checkAvailability(
    tourId: ID!
    date: String!
    participants: Int!
  ): AvailabilityResult!
}

type Mutation {
  createBooking(input: BookingInput!): Booking!
  updateBooking(id: ID!, input: BookingUpdateInput!): Booking!
  cancelBooking(id: ID!, reason: String): Booking!
  confirmBooking(id: ID!): Booking!
}
